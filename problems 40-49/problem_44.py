# Pentagon numbers
# Problem 44

"""
Pentagonal numbers are generated by the formula,
Pn=n(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which
their sum and difference are pentagonal and
D = |Pk - Pj| is minimised; what is the value of D?
"""


from math import sqrt


def getPentagonal(n):
    return n*(3*n-1)/2


def isPentagonal(p):
    """
    If n is a natural number, then p is pentagonal

    Deduced of the pentagonal formula:

    p = n(3n-1)/2
    2p = n(3n-1)
    2p = 3n^2 - n

    multiply by 3

    3*2p = 3*(3n^2 - n)
    6p = 9n^2 - 3n

    add 1/4

    6p + 1/4 = 9n^2 - 3n + 1/4
    6p + 1/4 = (3n - 1/2)^2
    sqrt(6p + 1/4) = 3n - 1/2
    sqrt(6p + 1/4) + 1/2 = 3n
    (sqrt(6p + 1/4) + 1/2)/3 = n

    (sqrt(6*p + .25) + .5) / 3 = n
    """
    n = (sqrt(6*p + .25) + .5)/3
    return n == int(n)


def main():
    """
    Takes about 2 seconds
    """
    pentagonals = []
    D = []

    # The upper bound was guessed
    for n in range(1, 2500):
        pentagonals.append(getPentagonal(n))

    for PJindex in range(len(pentagonals)):
        pj = pentagonals[PJindex]

        for PKindex in range(PJindex + 1, len(pentagonals)):
            pk = pentagonals[PKindex]

            if isPentagonal(pk + pj) and isPentagonal(abs(pk - pj)):
                D.append(abs(pk-pj))

    print min(D)

if __name__ == "__main__":
    main()
